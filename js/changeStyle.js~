/**
* changeStyle
* Source: 
*
* Copyright (c) 2013 Luis Otávio de Avelar
* Dual licensed under GPL and MIT licenses
**/

var changeStyle = {
  status: false,
  selectionStatus: false,
  selectionBox: null,
  selectorGenerator: null,
  selectedElement: null,
  hoveredElement: null,

  /**
    * Inicializa as configurações do plugin
    */
  initialize: function() {
    this.style.initialize();
    this.selectorGenerator = new SelectorGenerator();
  },

  /**
    * Abre o editor
    */
  open: function() {
    this.attachListeners();
    this.widget.open();
    this.status = true;
    this.enableSelection();
  },

  /**
    * Fecha o editor
    */
  close: function() {
    changeStyle.widget.close();
    changeStyle.status = false;
    changeStyle.disableSelection();
    changeStyle.detachClickListener();
    changeStyle.unhighlight();
    changeStyle.selectedElement = null;
    changeStyle.destroyHighlighter();
  },

  /**
    *função utilizada para destacar elementos da página
    * @param {element} el Element to highlight
    */
  highlight: function(el){

    if(!changeStyle.selectionBox)
      changeStyle.createHighlighter();

  // elemento que vai ser destacado
    changeStyle.hoveredElement = el;

    changeStyle.selectionBox.highlight(el); 
  },

  /**
    * Remove highlight from previously selected element
    */
  unhighlight: function() {
    changeStyle.hoveredElement = null;
    if (changeStyle.selectionBox)
      changeStyle.selectionBox.hide();
  },

	/**
	  * cria uma instãncia do objeto selectionBox
	  */
	createHighlighter: function(){
		//#f45f11
		changeStyle.selectionBox = new SelectionBox(3, "#0cf", null);
	},

	/**
    * Remove the highlighter
    */
  destroyHighlighter: function() {
    if (changeStyle.selectionBox) {
      changeStyle.selectionBox.destroy();
      delete changeStyle.selectionBox;
    }
  },

  /**
    * Adiciona Event Listener para atividades do mouse
    */
  attachListeners: function() {
    document.addEventListener('mousemove', this.onMouseMove, true);
    document.addEventListener('mousedown', this.onMouseDown, true);
    document.addEventListener('click', this.onMouseClick, true);
  },

  /**
    * Remove event listeners for mouse activity
    */
  detachListeners: function() {
    document.removeEventListener('mousemove', this.onMouseMove, true);
    document.removeEventListener('mousedown', this.onMouseDown, true);
  },

   /**
    * Remove event listener for mouse click
    */
  detachClickListener: function() {
    // We have to remove the click listener in a second phase because if we remove it
    // after the mousedown, we won't be able to cancel clicked links
    // thanks to firebug
    document.removeEventListener('click', this.onMouseClick, true);
  },


  /**
    * Select element(s)
    * @param {element} el Element to select
    * @param {string} selector CSS selector for elements to select
    */ 
  select: function(el, selector) {
    changeStyle.disableSelection();
    // if element is specified, it is selected
    if (el) {
      changeStyle.selectedElement = el;
      selector = changeStyle.selectorGenerator.generate(el);
      changeStyle.highlight(el);
    }
    // else select all elements that match the specified CSS selector
    else if (selector) {
      try {
        el = $(selector).get(0);
        changeStyle.selectedElement = el;
        changeStyle.highlight(el);
      }
      catch (e) {
        changeStyle.selectedElement = null;
      }
    }
    else {
      changeStyle.selectedElement = changeStyle.hoveredElement;
      selector = changeStyle.selectorGenerator.generate(changeStyle.selectedElement);
    }

    changeStyle.style.fillCache(selector);
    changeStyle.widget.open();
    setTimeout(function() {
      changeStyle.style.removeFromStyleElement();
    }, 100);
	},

	/**
    * Enable / disable selection of elements
    */
  toggleSelection: function() {
    if (changeStyle.selectionStatus) {
      changeStyle.select(null, changeStyle.style.cache.selector);
      changeStyle.disableSelection();
    }
    else {
      //TODO changeStyle.widget.disable();
      changeStyle.unhighlight();
      changeStyle.enableSelection();
    }
  },

  /**
    * Enable selection of elements
    */
  enableSelection: function() {
    changeStyle.attachListeners();
    changeStyle.selectionStatus = true;
  },

	/**
    * Disable selection of elements
    */
  disableSelection: function() {
    changeStyle.detachListeners();
    changeStyle.selectionStatus = false;
  },

   /**
    * When the user moves the mouse
    */
  onMouseMove: function(e) {
    /* for dropdown
    if (e.target.className == 'stylebot-dropdown-li') {
      var $el = $(e.target.innerText).get(0);
      if ($el != stylebot.hoveredElement) {
        stylebot.highlight($el);
      }
      return true;
    }

    if (!stylebot.shouldSelect(e.target))
      return true;*/

    if (changeStyle.belongsToStylebot(e.target)) {
      changeStyle.unhighlight();
      return true;
    }

    e.preventDefault();
    e.stopPropagation();
    changeStyle.highlight(e.target);
  },


	/**
    * When the user clicks the mouse
    */
  onMouseClick: function(e) {
    if (!changeStyle.belongsToStylebot(e.target)) {
      e.preventDefault();
      e.stopPropagation();
      changeStyle.detachClickListener();
      return false;
    }
  },


	/**
    * When the user has pressed the mouse button down
    */
  onMouseDown: function(e) {
    if (!changeStyle.belongsToStylebot(e.target)) {
      e.preventDefault();
      e.stopPropagation();
      changeStyle.select();
      return false;
    }
  },

  /**
    * Checks if the specified element belongs to the stylebot editor
    * @param {element} el Element to check
    * @return {boolean} True if element belongs to stylebot
    */
  belongsToStylebot: function(el) {
    var $el = $(el);
    var parent = $el.closest('#change-style');
    var id = $el.attr('id');
    if (parent.length != 0 || (id && id.indexOf('change-style') != -1))
      return true;
    return false;
  }

};

















